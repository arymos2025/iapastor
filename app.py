import streamlit as st
import pandas as pd
import os # Importamos os para la correcci칩n del OSError
import pinecone # Versi칩n de contingencia
from sentence_transformers import SentenceTransformer
import random

# --- 0. Configuraci칩n de la P치gina ---
st.set_page_config(
    page_title="Buscador B칤blico Vectorial",
    page_icon="游닀",
    layout="wide"
)

# --- 1. CONEXI칍N A PINECONE Y MODELO (USANDO st.secrets) ---

@st.cache_resource
def get_embedding_model():
    """
    Carga el modelo de Sentence Transformer para vectorizar las consultas.
    Aplica la correcci칩n para el OSError: PermissionError.
    """
    MODEL_NAME = "paraphrase-multilingual-mpnet-base-v2"
    
    # 游뚿 CORRECCI칍N PARA EL OSERROR: Establecemos una carpeta de cach칠 dentro de la app (model_cache), que s칤 tiene permisos.
    os.environ['SENTENCE_TRANSFORMERS_HOME'] = '/app/model_cache'
    
    return SentenceTransformer(MODEL_NAME)

@st.cache_resource
def get_pinecone_index():
    """
    Inicializa la conexi칩n a Pinecone usando la librer칤a antigua de contingencia.
    """
    try:
        # Lee las claves desde los Secretos 
        PINECONE_API_KEY = st.secrets['pinecone']['api_key']
        INDEX_NAME = st.secrets['pinecone']['index_name']
        
        # Necesitamos el ENVIRONMENT/REGION para la librer칤a antigua.
        # Basado en tu 칤ndice, la regi칩n es 'us-east-1'.
        REGION = "us-east-1"
        
        # 游뚿 Inicializaci칩n de CONTINGENCIA con el formato de la librer칤a antigua (pinecone.init)
        pinecone.init(api_key=PINECONE_API_KEY, environment=REGION)
        
        # Retorna el 칤ndice (la parte de .Index() es igual en ambas librer칤as)
        return pinecone.Index(INDEX_NAME)
        
    except KeyError:
        st.error("Error de configuraci칩n: Aseg칰rate de que las claves 'api_key' e 'index_name' est칠n configuradas en los Secretos bajo la secci칩n [pinecone].")
        st.stop()
    except Exception as e:
        # Aqu칤 caer치 si el paquete 'pinecone' es la versi칩n m치s reciente que da el error de "init is no longer a top-level attribute"
        st.error(f"Ocurri칩 un error al conectar/inicializar Pinecone. Detalle: {e}. Si el error es 'init is no longer...', la librer칤a 'pinecone' tambi칠n es obsoleta.")
        st.stop()

# Cargar el modelo y la conexi칩n
model = get_embedding_model()
index = get_pinecone_index()

# --- 2. Interfaz Principal y B칰squeda ---
st.title("游닀 Buscador B칤blico Vectorial (Semantic Search)")
st.markdown("""
Escribe una *frase, **emoci칩n* o *concepto* (ej: *'c칩mo encontrar paz') y la aplicaci칩n buscar치 los **versos* m치s similares sem치nticamente.
""")

query = st.text_input(
    "Escribe tu consulta o sentimiento:",
    placeholder="Ej: Necesito fortaleza para afrontar un desaf칤o dif칤cil.",
    key="user_query"
)

top_k = st.sidebar.slider(
    "N칰mero de versos a mostrar:",
    min_value=1, max_value=15, value=5
)

# --- 3. L칩gica de B칰squeda Vectorial ---

if query:
    with st.spinner(f"Buscando los {top_k} versos m치s relevantes..."):
        try:
            query_vector = model.encode(query).tolist()
            
            response = index.query(
                vector=query_vector,
                top_k=top_k,
                include_metadata=True 
            )

            if response and response.matches:
                st.subheader(f"Resultados de b칰squeda por similitud para: *'{query}'*")
                
                results_list = []
                for match in response.matches:
                    metadata = match.metadata
                    
                    # 游뚿 CORRECCI칍N FINAL DE L칍GICA: L칩gica de contingencia para obtener el texto completo
                    # Esto resuelve el error original de texto incompleto/error de clave ('verso')
                    texto_del_verso = metadata.get('texto', metadata.get('verso', metadata.get('texto_completo', 'N/A')))
                    
                    results_list.append({
                        "Similitud": f"{match.score:.4f}",
                        "Libro": metadata.get('libro', 'N/A'),
                        "Cap칤tulo": metadata.get('capitulo', 'N/A'),
                        "Verso": metadata.get('verso', 'N/A'),
                        "Texto": texto_del_verso 
                    })
                
                df_results = pd.DataFrame(results_list)
                
                st.dataframe(
                    df_results,
                    use_container_width=True,
                    hide_index=True,
                    column_order=('Similitud', 'Libro', 'Cap칤tulo', 'Verso', 'Texto') 
                )
                
                # Destacar el mejor match
                st.markdown("---")
                st.subheader("游볞 Verso M치s Relevante")
                best_match = df_results.iloc[0]
                
                st.info(f"*{best_match['Texto']}\n\nReferencia:* {best_match['Libro']} {best_match['Cap칤tulo']}:{best_match['Verso']} | Similitud: {best_match['Similitud']}")
                
            else:
                st.warning("No se encontraron versos con alta similitud para esta consulta.")
                
        except Exception as e:
            st.error(f"Ocurri칩 un error durante la consulta a Pinecone. Detalle: {e}")

else:
    st.info("Escribe tu consulta para empezar la b칰squeda sem치ntica en la Biblia.")

# --- Pie de p치gina ---
st.sidebar.markdown("---")
st.sidebar.markdown(f"칈ndice de Pinecone: *{st.secrets['pinecone']['index_name']}*") 
st.sidebar.markdown("Proyecto de B칰squeda Sem치ntica B칤blica.")